import type { NodeishFilesystem } from "@lix-js/fs";
import type raw from "isomorphic-git";
import type { Endpoints } from "@octokit/types";
export type Author = {
    name?: string;
    email?: string;
    timestamp?: number;
    timezoneOffset?: number;
};
export declare class LixError extends Error {
    response?: {
        status?: number;
    };
}
export type Repository = {
    [x: string]: any;
    nodeishFs: NodeishFilesystem;
    checkout: (args: {
        branch: string;
    }) => Promise<void>;
    commit: (args: {
        author: Author;
        message: string;
    }) => Promise<Awaited<ReturnType<typeof raw.commit>> | undefined>;
    push: () => Promise<Awaited<ReturnType<typeof raw.push>> | undefined>;
    pull: (args: {
        author: Author;
        fastForward: boolean;
        singleBranch: true;
    }) => Promise<any>;
    add: (args: {
        filepath: string;
    }) => Promise<Awaited<ReturnType<typeof raw.add>>>;
    listRemotes: () => Promise<Awaited<ReturnType<typeof raw.listRemotes>> | undefined>;
    log: (args?: {
        since?: Date;
        depth?: number;
    }) => Promise<Awaited<ReturnType<typeof raw.log>>>;
    statusMatrix: (args: {
        filter: any;
    }) => Promise<Awaited<ReturnType<typeof raw.statusMatrix>>>;
    status: (args: {
        filepath: string;
    }) => Promise<Awaited<ReturnType<typeof raw.status>>>;
    mergeUpstream: (args?: {
        branch?: string;
    }) => Promise<Endpoints["POST /repos/{owner}/{repo}/merge-upstream"]["response"]["data"] | {
        error: any;
    }>;
    createFork: () => Promise<Endpoints["POST /repos/{owner}/{repo}/forks"]["response"]>;
    forkStatus: () => Promise<{
        ahead: number;
        behind: number;
        conflicts: boolean;
    } | {
        error: string;
    }>;
    getOrigin: (arg?: {
        safeHashOnly?: boolean;
    }) => Promise<string>;
    getCurrentBranch: () => Promise<string | undefined>;
    getBranches: () => Promise<string[] | undefined>;
    errors: Subscribable<LixError[]>;
    getFirstCommitHash: () => Promise<string | undefined>;
    getMeta: () => Promise<{
        name: string;
        isPrivate: boolean;
        isFork: boolean;
        owner: {
            name?: string;
            email?: string;
            login: string;
        };
        permissions: {
            admin: boolean;
            pull: boolean;
            push: boolean;
        };
        parent?: {
            url: string;
            fullName: string;
        };
    } | {
        error: Error;
    }>;
};
export type Subscribable<Value> = {
    (): Value;
    subscribe: (callback: (value: Value) => void) => void;
};
//# sourceMappingURL=api.d.ts.map