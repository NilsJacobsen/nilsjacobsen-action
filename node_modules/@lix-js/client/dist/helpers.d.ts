import type { NodeishFilesystem } from "@lix-js/fs";
/**
 * Wraps a nodeishFs implementation with a js proxy for detailed logging, debugging and transparently replacing the file access behaviour.
 * advantage of using this approach is that the underlying fs can also be swapped to something like lightingfs seamlessly.
 */
type Args = {
    nodeishFs: NodeishFilesystem;
    verbose?: boolean;
    description?: string;
    intercept?: (args: {
        prop: keyof NodeishFilesystem;
        execute: () => any;
    }) => any;
};
export declare const withLazyFetching: ({ nodeishFs, verbose, description, intercept, }: Args) => NodeishFilesystem;
/**
 * Transforms a remote URL to a standard format.
 */
export declare function transformRemote(remote: string): string;
export declare function parseLixUri(uriText: string): {
    error: unknown;
    username: string;
    password: string;
    protocol: string;
    lixHost: string;
    namespace: string;
    repoHost: string;
    owner: string;
    repoName: string;
} | {
    username: string;
    password: string;
    protocol: string;
    lixHost: string;
    namespace: string;
    repoHost: string;
    owner: string;
    repoName: string;
    error?: undefined;
};
export {};
//# sourceMappingURL=helpers.d.ts.map